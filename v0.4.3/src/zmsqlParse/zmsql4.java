/* Generated By:JavaCC: Do not edit this line. zmsql4.java */
package zmsqlParse;
import java.util.Vector;
import staticContent.*;
import dataBase.*;

public class zmsql4 implements zmsql4Constants {
  public static void main(String args []) throws ParseException
  {
    zmsql4 parser = new zmsql4(System.in);
    int j=0;
    Vector v=new Vector();
    Expression exp=new Expression(); //表达式
    ColumnDef coldef=new ColumnDef(); //列定义
    TableConstraint tc=new TableConstraint(); //表级限定
        TableContent tContent=new TableContent(); //表的内容
        DropTableInfo dti=new DropTableInfo(); //删除数据库表
        InsertIntoInfo iii=new InsertIntoInfo();//插入
        Delete de=new Delete();//删除符合条件的表的内容
        UpdateTable up=new UpdateTable();//更新表的内容
        SelectTable st=new SelectTable();//查询表的内容  
    try
    {
        //parser.expression(exp);//表达式
        //coldef=parser.GetColumnDef();//列定义
        ///tContent=parser.GetTableContent();//表的内容
        //tc=parser.GetTableConstraint();//表级限定
        //dti=parser.GetDropTable();//删除数据库表
        //iii=parser.GetInsertInto();//插入
        //de=parser.GetDelete();//删除符合条件的表的内容
                //up=parser.GetUpdate();//更新表的内容
        st=parser.GetSelect();//查询表的内容
        j=1;
    }
    catch (Exception e)
      {
        //System.out.println(e.getMessage());
      }

         if(0==j)
         {
                System.out.println("\u5339\u914d\u5931\u8d25!");
         }else{
            System.out.println("\u5339\u914d\u6210\u529f!\u005cn");//插入，删除，更新，查表
            //System.out.println("匹配成功!\n"); //删除表
            //System.out.println("匹配成功!\n"+tContent.getDescribe()); //表的内容
            //System.out.println("匹配成功!\n"+tc.getDescribe()); //表的约束
            //System.out.println("匹配成功!\n"+coldef.getDescribe()); //列的描述
                //System.out.println("匹配成功!表达式的大小为："+exp.getElements().size()); //表达式的大小
                try
                {
                    System.out.println((String)((Vector)st.exeSQL()).get(1));//查询表的内容
                    //System.out.println((String)((Vector)up.exeSQL()).get(1));//更新表的内容
                    //System.out.println((String)((Vector)de.exeSQL()).get(1));//删除符合条件的表的内容
                    //System.out.println((String)((Vector)iii.exeSQL()).get(1));//插入表
                    //System.out.println("表达式的值为:"+StaticMethod.calSimpleExp(v));
                        //System.out.println(StaticMethod.calExpression(exp.getElements()).getString());//表达式
                        //System.out.println((String)((Vector)tContent.executeSQL()).get(1));//表的内容
                        //System.out.println((String)((Vector)dti.exeSQL()).get(1));//删除表
                }
                catch (Exception e)
        {
                System.out.println(e.getMessage());
        }
         }
  }

  final public String GetNumericOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      t = jj_consume_token(ADD);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    case MULTIPLY:
      t = jj_consume_token(MULTIPLY);
      break;
    case DIVIDE:
      t = jj_consume_token(DIVIDE);
      break;
    case MOD:
      t = jj_consume_token(MOD);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String GetLogicOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GREAT:
      t = jj_consume_token(GREAT);
      break;
    case LESS:
      t = jj_consume_token(LESS);
      break;
    case EQUAL:
      t = jj_consume_token(EQUAL);
      break;
    case AND:
      t = jj_consume_token(AND);
      break;
    case OR:
      t = jj_consume_token(OR);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public void GetOperand(Expression exp) throws ParseException {
  Token t;
  Operand od = new Operand();
  Operand odm = new Operand();
  Variable var;
  Function f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case ICONSTANT:
    case FCONSTANT:
    case IDENTIFIER:
    case SCONSTANT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        odm.SetINT(-1);
        exp.addElement(odm);
        exp.addElement(Operator.get("*"));
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ICONSTANT:
        t = jj_consume_token(ICONSTANT);
              od.SetINT(Integer.parseInt(t.image));
              exp.addElement(od);
        break;
      case FCONSTANT:
        t = jj_consume_token(FCONSTANT);
              od.SetFLOAT( Float.parseFloat(t.image));
              exp.addElement(od);
        break;
      case SCONSTANT:
        t = jj_consume_token(SCONSTANT);
              od.SetSTRING(t.image);
              exp.addElement(od);
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_1(2)) {
          t = jj_consume_token(IDENTIFIER);
              var=new Variable(t.image);
              exp.addElement(var);
        } else if (jj_2_2(2)) {
          //函数
                      f = GetFunction();
          exp.addElement(f);
          //try{
            //	exp.addElement(f.eval()); //f.eval()返回Operand
           //}catch(Exception e) {
            // 	e.printStackTrace();
           //}

        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case 54:
      jj_consume_token(54);
                           exp.addElement(Operator.get("("));
      subexpression(exp);
      jj_consume_token(55);
                           exp.addElement(Operator.get(")"));
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OpPart(Expression  exp) throws ParseException {
  String opstr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case MINUS:
    case DIVIDE:
    case MOD:
    case MULTIPLY:
      opstr = GetNumericOperator();
      exp.addElement(Operator.get(opstr));
      break;
    case GREAT:
    case LESS:
    case EQUAL:
    case AND:
    case OR:
      opstr = GetLogicOperator();
      exp.addElement(Operator.get(opstr));
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    GetOperand(exp);
  }

  final public void subexpression(Expression exp) throws ParseException {
    GetOperand(exp);
    label_1:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_1;
      }
      OpPart(exp);
    }
  }

  final public void expression(Expression exp) throws ParseException {
    GetOperand(exp);
    label_2:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_2;
      }
      OpPart(exp);
    }
    jj_consume_token(EOL);
  }

  final public Expression ParsePartExpression() throws ParseException {
  Expression exp = new Expression();
    subexpression(exp);
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Function GetFunction() throws ParseException {
  Function f;
  Token t;
  Expression exp;
    t = jj_consume_token(IDENTIFIER);
                        //将函数名称传递
    f = Function.get(t.image);
    f.SetName(t.image);
    jj_consume_token(54);
    //函数名后跟着()
      exp = ParsePartExpression();
    f.AddParam(exp);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(56);
      exp = ParsePartExpression();
      f.AddParam(exp);
    }
    jj_consume_token(55);
    {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public ColumnDef GetColumnDef() throws ParseException {
  ColumnDef coldef=new ColumnDef();
  Token t;
  int i;
  Expression exp=new Expression();
    t = jj_consume_token(IDENTIFIER);
                      coldef.setColName(t.image);
    i = GetDataType();
                      coldef.setColType(i);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNIQUE:
      jj_consume_token(UNIQUE);
                 coldef.setUnique(true);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOTNULL:
      jj_consume_token(NOTNULL);
                  coldef.setNotNull(true);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMARYKEY:
      jj_consume_token(PRIMARYKEY);
                     coldef.setPrimaryKey(true);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQLDEFAULT:
      jj_consume_token(SQLDEFAULT);
      exp = ParsePartExpression();
                                             coldef.setDefaultExp(exp);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    {if (true) return coldef;}
    throw new Error("Missing return statement in function");
  }

  final public int GetDataType() throws ParseException {
  int i=-1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
             i=DataType.INT;
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
                i=DataType.FLOAT;
      break;
    case STRING:
      jj_consume_token(STRING);
                 i=DataType.STRING;
      break;
    case BOOL:
      jj_consume_token(BOOL);
               i=DataType.BOOL;
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public TableConstraint GetTableConstraint() throws ParseException {
        Token t;
        Expression exp = new Expression();
        TableConstraint tc=new TableConstraint();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRAINT:
      jj_consume_token(CONSTRAINT);
      t = jj_consume_token(IDENTIFIER);
                                      tc.setTcName(t.image);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHECK:
      jj_consume_token(CHECK);
      exp = ParsePartExpression();
                        tc.setTcType(3);
                        tc.addElement(exp);
      break;
    case PRIMARYKEY:
      jj_consume_token(PRIMARYKEY);
      jj_consume_token(54);
      t = jj_consume_token(IDENTIFIER);
                                tc.setTcType(1);
                        tc.addElement(t.image);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 56:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
        jj_consume_token(56);
        t = jj_consume_token(IDENTIFIER);
                                               tc.addElement(t.image);
      }
      jj_consume_token(55);
      break;
    case FOREIGNKEY:
      jj_consume_token(FOREIGNKEY);
                                 tc.setTcType(2);
      jj_consume_token(54);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(55);
                                                   tc.addElement(t.image);
      jj_consume_token(REFERENCES);
      t = jj_consume_token(IDENTIFIER);
                                                  tc.addElement(t.image);
      jj_consume_token(54);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(55);
                                                   tc.addElement(t.image); tc.addElement(1);tc.addElement(1);
      if (jj_2_5(2)) {
        jj_consume_token(ON);
        jj_consume_token(DELETE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOACTION:
          jj_consume_token(NOACTION);
          break;
        case RESTRICT:
          jj_consume_token(RESTRICT);
          break;
        case SETNULL:
          jj_consume_token(SETNULL);
                                                                         tc.setElement(3,2);
          break;
        case CASCADE:
          jj_consume_token(CASCADE);
                                                                                                             tc.setElement(3,3);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ON:
        jj_consume_token(ON);
        jj_consume_token(UPDATE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOACTION:
          jj_consume_token(NOACTION);
          break;
        case RESTRICT:
          jj_consume_token(RESTRICT);
          break;
        case SETNULL:
          jj_consume_token(SETNULL);
                                                                         tc.setElement(4,2);
          break;
        case CASCADE:
          jj_consume_token(CASCADE);
                                                                                                             tc.setElement(4,3);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return tc;}
    throw new Error("Missing return statement in function");
  }

  final public TableContent GetTableContent() throws ParseException {
        ColumnDef coldef;
        TableConstraint tc;
        Token t;
        TableContent tContent=new TableContent();
    jj_consume_token(CREATE);
    jj_consume_token(TABLE);
    t = jj_consume_token(IDENTIFIER);
                                         tContent.settName(t.image);
    jj_consume_token(54);
    coldef = GetColumnDef();
                                        tContent.getvColumn().addElement(coldef);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_5;
      }
      jj_consume_token(56);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        coldef = GetColumnDef();
                                                  tContent.getvColumn().addElement(coldef);
        break;
      case PRIMARYKEY:
      case CHECK:
      case CONSTRAINT:
      case FOREIGNKEY:
        tc = GetTableConstraint();
                                                  tContent.getvConstraint().addElement(tc);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(55);
    jj_consume_token(EOL);
                {if (true) return tContent;}
    throw new Error("Missing return statement in function");
  }

  final public DropTableInfo GetDropTable() throws ParseException {
  Token t;
  DropTableInfo dti=new DropTableInfo();
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    t = jj_consume_token(IDENTIFIER);
                                        dti.setsTablename(t.image);
    jj_consume_token(EOL);
    {if (true) return dti;}
    throw new Error("Missing return statement in function");
  }

  final public InsertIntoInfo GetInsertInto() throws ParseException {
  Token t;
  InsertIntoInfo iii=new InsertIntoInfo();
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
    t = jj_consume_token(IDENTIFIER);
                                       iii.setsTablename(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      jj_consume_token(54);
      t = jj_consume_token(IDENTIFIER);
                       iii.addColumnname(t.image);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 56:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_6;
        }
        jj_consume_token(56);
        t = jj_consume_token(IDENTIFIER);
                           iii.addColumnname(t.image);
      }
      jj_consume_token(55);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(VALUES);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ICONSTANT:
      t = jj_consume_token(ICONSTANT);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                         iii.addValue(t.image);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_7;
      }
      jj_consume_token(56);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ICONSTANT:
        t = jj_consume_token(ICONSTANT);
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                             iii.addValue(t.image);
    }
    jj_consume_token(55);
    jj_consume_token(EOL);
    {if (true) return iii;}
    throw new Error("Missing return statement in function");
  }

  final public Delete GetDelete() throws ParseException {
        Delete de=new Delete();
        Token t;
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    t = jj_consume_token(IDENTIFIER);
                                             de.setsTablename(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      t = jj_consume_token(IDENTIFIER);
                                    de.setsColName(t.image);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ICONSTANT:
        t = jj_consume_token(ICONSTANT);
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                   de.setValue(t.image);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(EOL);
                {if (true) return de;}
    throw new Error("Missing return statement in function");
  }

  final public UpdateTable GetUpdate() throws ParseException {
  UpdateTable up=new UpdateTable();
  Token t;
    jj_consume_token(UPDATE);
    t = jj_consume_token(IDENTIFIER);
                                up.setsTablename(t.image);
    jj_consume_token(SET);
    t = jj_consume_token(IDENTIFIER);
                             up.addColname(t.image);
    jj_consume_token(57);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ICONSTANT:
      t = jj_consume_token(ICONSTANT);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                             up.addValue(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      t = jj_consume_token(IDENTIFIER);
                              up.addColname(t.image);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ICONSTANT:
        t = jj_consume_token(ICONSTANT);
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                   up.addValue(t.image);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(EOL);
                {if (true) return up;}
    throw new Error("Missing return statement in function");
  }

  final public SelectTable GetSelect() throws ParseException {
  SelectTable st=new SelectTable();
  Token t;
    jj_consume_token(SELECT);
    t = jj_consume_token(IDENTIFIER);
                              st.addColname(t.image);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_8;
      }
      jj_consume_token(56);
      t = jj_consume_token(IDENTIFIER);
                        st.addColname(t.image);
    }
    jj_consume_token(FROM);
    t = jj_consume_token(IDENTIFIER);
                             st.setsTablename(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      t = jj_consume_token(IDENTIFIER);
                               st.addColname(t.image);
      jj_consume_token(57);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ICONSTANT:
        t = jj_consume_token(ICONSTANT);
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                   st.addValue(t.image);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(EOL);
                {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(ON)) return true;
    if (jj_scan_token(DELETE)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(SCONSTANT)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(FCONSTANT)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(ICONSTANT)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public zmsql4TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x1000,0x2000,0x4000,0x1e0,0x10000,0x0,0x780000,0x780000,0x800000,0x2a000,0x0,0x3a000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2000f0,0x1f00,0x20,0x2c000,0x43c020,0x201ff0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x1000000,0x10000,0x1000000,0x400000,0x14000,0x1000000,0x14000,0x14000,0x0,0x14000,0x14000,0x0,0x1000000,0x14000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public zmsql4(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public zmsql4(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new zmsql4TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public zmsql4(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new zmsql4TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public zmsql4(zmsql4TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(zmsql4TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
