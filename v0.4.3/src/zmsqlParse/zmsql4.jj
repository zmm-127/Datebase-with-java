/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(zmsql4)
package zmsqlParse;
import java.util.Vector;
import staticContent.*;
import dataBase.*;
 
public class zmsql4   
{ 
  public static void main(String args []) throws ParseException
  {
    zmsql4 parser = new zmsql4(System.in);
    int j=0;
    Vector v=new Vector();
    Expression exp=new Expression(); //表达式
    ColumnDef coldef=new ColumnDef(); //列定义
    TableConstraint tc=new TableConstraint(); //表级限定
	TableContent tContent=new TableContent(); //表的内容
	DropTableInfo dti=new DropTableInfo(); //删除数据库表
	InsertIntoInfo iii=new InsertIntoInfo();//插入
	Delete de=new Delete();//删除符合条件的表的内容
	UpdateTable up=new UpdateTable();//更新表的内容
	SelectTable st=new SelectTable();//查询表的内容  
    try 
    { 
    	//parser.expression(exp);//表达式
    	//coldef=parser.GetColumnDef();//列定义
    	///tContent=parser.GetTableContent();//表的内容
    	//tc=parser.GetTableConstraint();//表级限定
    	//dti=parser.GetDropTable();//删除数据库表
    	//iii=parser.GetInsertInto();//插入
    	//de=parser.GetDelete();//删除符合条件的表的内容
   		//up=parser.GetUpdate();//更新表的内容
    	st=parser.GetSelect();//查询表的内容
    	j=1;
    }
    catch (Exception e)
      {
        //System.out.println(e.getMessage());
      }

	 if(0==j)
	 {
		System.out.println("匹配失败!");
 	 }else{
 	    System.out.println("匹配成功!\n");//插入，删除，更新，查表
 	    //System.out.println("匹配成功!\n"); //删除表
 	    //System.out.println("匹配成功!\n"+tContent.getDescribe()); //表的内容
 	    //System.out.println("匹配成功!\n"+tc.getDescribe()); //表的约束
 	    //System.out.println("匹配成功!\n"+coldef.getDescribe()); //列的描述
		//System.out.println("匹配成功!表达式的大小为："+exp.getElements().size()); //表达式的大小
		try
		{
		    System.out.println((String)((Vector)st.exeSQL()).get(1));//查询表的内容
		    //System.out.println((String)((Vector)up.exeSQL()).get(1));//更新表的内容
		    //System.out.println((String)((Vector)de.exeSQL()).get(1));//删除符合条件的表的内容
		    //System.out.println((String)((Vector)iii.exeSQL()).get(1));//插入表
		    //System.out.println("表达式的值为:"+StaticMethod.calSimpleExp(v));
			//System.out.println(StaticMethod.calExpression(exp.getElements()).getString());//表达式
			//System.out.println((String)((Vector)tContent.executeSQL()).get(1));//表的内容
			//System.out.println((String)((Vector)dti.exeSQL()).get(1));//删除表
		}
		catch (Exception e)
      	{
        	System.out.println(e.getMessage());
      	}
 	 }
  }
}

PARSER_END(zmsql4)

SKIP :	{  " "| "\r"| "\t"| "\n"}
//数据类型
TOKEN : { < INT:"int" >|< FLOAT:"float" >|< STRING:"string" >|< BOOL:"bool" >
          |< TRUE:"true" >|< FALSE:"false" >}
//约束
TOKEN : { < UNIQUE:"unique" >|< NOTNULL :"not null">|< PRIMARYKEY :"primary key">
          |< SQLDEFAULT:"sqldefault">|< CHECK:"check" >|< CONSTRAINT:	"constraint" >
          |< FOREIGNKEY:"foreign key" >|< REFERENCES:"references" >|< NOACTION:"no action" >
          |< RESTRICT:"restrict" >|< SETNULL:"set null" >|< CASCADE:"cascade" >|< ON:"on" >}
//关键字
TOKEN : { < DELETE:"delete" >|< UPDATE:"update" >|< INSERT:"insert" >|< CREATE:"create" >
		  |< DROP:"drop" >|< SELECT:"select" >|< TABLE:"table" >|< WHERE:"where" >|< INTO:"into" >
		  |< VALUES:"values" >|< SET:"set" >| < FROM:"from" >}
		  //算术运算 逻辑运算
TOKEN : {  < ADD : "+" >| < MINUS : "-" >|< DIVIDE : "/" >| < MOD : "%" >
			| < GREAT : ">" >| < LESS : "<" >| < EQUAL : "==" >| < AND : "and" >| < OR : "or" >| < NOT : "not" >}
TOKEN : {   < ICONSTANT : (< DIGIT >)+ >						 //整数
			| < FCONSTANT : (< DIGIT >)+ "." (< DIGIT >)* >		 //小数
			| < IDENTIFIER :								//标识符
    					< LETTER >
    						(< LETTER > | < DIGIT >)* >
			| < SCONSTANT : "'" ([ "a"-"z", "\\", "%", "_" ])* "'" >	//字符串
			| < #LETTER : [ "a"-"z", "A"-"Z", "_" ,"*"] >| < #DIGIT : [ "0"-"9" ] >
			| < EOL :";" >}
TOKEN: { < MULTIPLY : "*" > }

String GetNumericOperator() : //算术运算符
{
  Token t;
}
{
  ( t = < ADD >| t = < MINUS >| t = < MULTIPLY >| t = < DIVIDE >| t = < MOD >)
  {
    return t.image;
  }
}

String GetLogicOperator() : //逻辑运算符
{
  Token t; 
}
{
  (t = < GREAT >| t = < LESS > | t = < EQUAL >| t = < AND >| t = < OR >)
  {
    return t.image;
  }
}

void GetOperand(Expression exp) :  //将操作数传入exp数组中
{
  Token t;
  Operand od = new Operand();
  Operand odm = new Operand();
  Variable var;
  Function f;
}
{
    [		//[]代表可选表示可匹配可不匹配
      < MINUS >
      {
        odm.SetINT(-1);
        exp.addElement(odm);
        exp.addElement(Operator.get("*"));
      }
    ]
    (
	    t = < ICONSTANT > //整数
	    {
	      od.SetINT(Integer.parseInt(t.image));
	      exp.addElement(od);
	    }
	    |
	    t = < FCONSTANT > //浮点数
	    {
	      od.SetFLOAT( Float.parseFloat(t.image));
	      exp.addElement(od);
	    }
		|
	    t = < SCONSTANT >//字符串
	    {
	      od.SetSTRING(t.image);
	      exp.addElement(od);
	    }
	    |LOOKAHEAD(2)  t = < IDENTIFIER >
	    {
	      var=new Variable(t.image);
	      exp.addElement(var);
	    }
	    |LOOKAHEAD(2)     //函数
	    f = GetFunction()
    	{
    	  exp.addElement(f);
    	  //try{
    	    //	exp.addElement(f.eval()); //f.eval()返回Operand
    	   //}catch(Exception e) {
    	    // 	e.printStackTrace();
    	   //}
    	}	
	)
	|//左括右括
	(
	  	"(" {      exp.addElement(Operator.get("("));    }
			subexpression(exp)
		")"  {     exp.addElement(Operator.get(")"));    }
	)	   
}

void OpPart(Expression  exp) :  //将操作符传入exp数组中
{
  String opstr;
}
{
  (
    opstr = GetNumericOperator()
    {
      exp.addElement(Operator.get(opstr));
    }
  | opstr = GetLogicOperator()
    {
      exp.addElement(Operator.get(opstr));
    }
  )
  GetOperand(exp)
}

void subexpression(Expression exp) :  //次级表达式，如包含在括号中
{}
{
  GetOperand(exp)
  (
    LOOKAHEAD(2)
    OpPart(exp)
  )* 
}

void expression(Expression exp):   //表达式
{}
{
  GetOperand(exp)
  (
    LOOKAHEAD(2)
    OpPart(exp)
  )* < EOL >
}

Expression ParsePartExpression() :
{
  Expression exp = new Expression();
}
{
  subexpression(exp)
  {
    return exp;
  }
}

Function GetFunction() :   //定义函数
{
  Function f;
  Token t;
  Expression exp;
}
{
  t = < IDENTIFIER >
  {			//将函数名称传递
    f = Function.get(t.image);
    f.SetName(t.image);
  }
  "("     //函数名后跟着()
  exp = ParsePartExpression()  //函数名中的参数
  {
    f.AddParam(exp);
  }
  (
    "," exp = ParsePartExpression()
    {
      f.AddParam(exp);
    }
  )*
  ")"
  {
    return f;
  }
}

ColumnDef GetColumnDef(): //解析获取列定义
{
  ColumnDef coldef=new ColumnDef();
  Token t;
  int i;
  Expression exp=new Expression();
}
{
  (    t=< IDENTIFIER >{ coldef.setColName(t.image);}
    i=GetDataType() { coldef.setColType(i); }
  [ < UNIQUE > { coldef.setUnique(true); }]
  [ < NOTNULL > { coldef.setNotNull(true); }]
  [ < PRIMARYKEY > { coldef.setPrimaryKey(true); }]
  [ <SQLDEFAULT >exp=ParsePartExpression() { coldef.setDefaultExp(exp); }]
  {
    return coldef;
  }
  )
}

int GetDataType(): //获取数据类型
{
  int i=-1;
}
{
  (    < INT > {i=DataType.INT; }
  | < FLOAT > { i=DataType.FLOAT; }
  | < STRING > { i=DataType.STRING;}
  | < BOOL > { i=DataType.BOOL;}
  )
  {
    return i;
  }
}

TableConstraint GetTableConstraint() : //表级约束
{
	Token t;
	Expression exp = new Expression();
	TableConstraint tc=new TableConstraint();
}
{
  (
    [<CONSTRAINT > t=< IDENTIFIER > { tc.setTcName(t.image); }	]	//约束名
	(
		(   //检查约束即列值是否符合条件
		  < CHECK > exp=ParsePartExpression()
		  {
		    	tc.setTcType(3);
		    	tc.addElement(exp);
		  }
		)|(  //主键
			< PRIMARYKEY >
			"("
			t=< IDENTIFIER >
			{
			  	tc.setTcType(1);
		    	tc.addElement(t.image);
			}
			("," t=< IDENTIFIER > {tc.addElement(t.image); })*

			")"	  
		)|(  //外键
		< FOREIGNKEY > { tc.setTcType(2);}
			"(" t=< IDENTIFIER > ")" { tc.addElement(t.image); }
		< REFERENCES > t=< IDENTIFIER > { tc.addElement(t.image); }//1--no action或restrict 
			"(" t=< IDENTIFIER > ")" { tc.addElement(t.image); tc.addElement(1);tc.addElement(1);}
							[  //级联删除                                     //1，1代表设置外键时更新和删除操作默认为1
				LOOKAHEAD(2) < ON ><DELETE >
				(< NOACTION > |< RESTRICT >|< SETNULL >{ tc.setElement(3,2); } |< CASCADE >{ tc.setElement(3,3); } )
				]
				[  //级联更新
			 	< ON ><UPDATE >
				(< NOACTION > |< RESTRICT >|< SETNULL >{ tc.setElement(4,2); } |< CASCADE >{ tc.setElement(4,3); } )
				]
		)	 
	 )
	)
	{
		return tc;
	}
}

TableContent GetTableContent(): //获取定义表的内容
{
	ColumnDef coldef;
  	TableConstraint tc;
  	Token t;
  	TableContent tContent=new TableContent();
}
{
  < CREATE > <TABLE > t=< IDENTIFIER > { tContent.settName(t.image);} //表名
  "("
  		coldef=GetColumnDef() { tContent.getvColumn().addElement(coldef); }
  		(
  		  ","
  		  (
  		    coldef=GetColumnDef() 	{ tContent.getvColumn().addElement(coldef); }
  			|
  			tc=GetTableConstraint()	{ tContent.getvConstraint().addElement(tc); }
  		  )
  		)*
  ")"
  < EOL >
  {
		return tContent;
  }
}

DropTableInfo GetDropTable(): //删除数据库表
{
  Token t;
  DropTableInfo dti=new DropTableInfo();
}
{
  < DROP > < TABLE > t=< IDENTIFIER > { dti.setsTablename(t.image); }
  < EOL >
  {
    return dti;
  }
}

InsertIntoInfo GetInsertInto():  //向表中插入数据
{
  Token t; 
  InsertIntoInfo iii=new InsertIntoInfo();
}
{
  < INSERT >< INTO >t=< IDENTIFIER > { iii.setsTablename(t.image); }
  ["("
    t=< IDENTIFIER > { iii.addColumnname(t.image); }
    (","t=< IDENTIFIER > { iii.addColumnname(t.image); })*
    ")"
  ]
  < VALUES >
  "("
  (t = < ICONSTANT >|t=< IDENTIFIER >) { iii.addValue(t.image); }
  (","(t = < ICONSTANT >|t=< IDENTIFIER >) { iii.addValue(t.image); } )*
  ")"
  < EOL >
  {
    return iii;
  }
}

Delete GetDelete():  //删除符合条件的表中数据
{
	Delete de=new Delete();
	Token t;
}
{
	< DELETE > < FROM > t=< IDENTIFIER >{de.setsTablename(t.image);}
	[< WHERE > t=< IDENTIFIER >{de.setsColName(t.image);}
	 "="(t = < ICONSTANT >|t=< IDENTIFIER >) { de.setValue(t.image); }
	]
	< EOL >
	{
		return de;
    }
}

UpdateTable GetUpdate(): //更新表的内容
{
  UpdateTable up=new UpdateTable();
  Token t;
}
{
  < UPDATE > t=< IDENTIFIER > { up.setsTablename(t.image); }
  < SET > t=< IDENTIFIER > { up.addColname(t.image); }
  "=" (t = < ICONSTANT >|t=< IDENTIFIER >) { up.addValue(t.image); }
  [< WHERE > t=< IDENTIFIER >{up.addColname(t.image);}
	 "="(t = < ICONSTANT >|t=< IDENTIFIER >) { up.addValue(t.image); }
	]
	< EOL >
	{
		return up;
    }
}

SelectTable GetSelect():
{
  SelectTable st=new SelectTable();
  Token t;
}
{
  < SELECT > t=< IDENTIFIER >{st.addColname(t.image);}
  (","t=< IDENTIFIER > {st.addColname(t.image);})*
  < FROM > t=< IDENTIFIER > {st.setsTablename(t.image);}
   [< WHERE > t=< IDENTIFIER >{st.addColname(t.image);}
	 "="(t = < ICONSTANT >|t=< IDENTIFIER >) { st.addValue(t.image); }
	]
	< EOL >
	{
		return st;
    }
}    
